package game.enemies;

import edu.monash.fit2099.engine.actions.Action;
import edu.monash.fit2099.engine.actions.ActionList;
import edu.monash.fit2099.engine.actions.DoNothingAction;
import edu.monash.fit2099.engine.actors.Actor;
import edu.monash.fit2099.engine.displays.Display;
import edu.monash.fit2099.engine.positions.Exit;
import edu.monash.fit2099.engine.positions.GameMap;
import edu.monash.fit2099.engine.positions.Location;
import edu.monash.fit2099.engine.weapons.IntrinsicWeapon;
import game.Key;
import game.Player;
import game.Status;
import game.actions.AttackAction;
import game.behaviours.FollowBehaviour;

/**
 * The archnemesis of Mario
 */
public class Bowser extends Enemy {

    /**
     * Used to check if Bowser is in waiting for Mario
     */
    private boolean isWaiting;

    /**
     * Constructor.
     */
    public Bowser() {
        super("Bowser", 'B', 500); // Parent constructor call
        this.addCapability(Status.FIREPOWERED); // Sets this character to be capable of making fire on attack
        this.isWaiting = true; // Start of waiting for Mario
        this.behaviours.put(20, new FollowBehaviour(Player.getInstance())); // Adds follow behaviour to NPC; sets as medium priority
        this.addItemToInventory(new Key()); // Adds a key to the inventory of Bowser (drops when killed)
    }

    /**
     * @return The intrinsic weapon of Bowser
     */
    @Override
    protected IntrinsicWeapon getIntrinsicWeapon() {
        return new IntrinsicWeapon(80, "punches"); // Bowser weapon
    }

    /**
     * @param actions    collection of possible Actions for this Actor
     * @param lastAction The Action this Actor took last turn. Can do interesting things in conjunction with Action.getNextAction()
     * @param map        the map containing the Actor
     * @param display    the I/O object to which messages may be written
     * @return Action generated by the appropriate behaviours
     * @see Enemy#playTurn(ActionList, Action, GameMap, Display)
     */
    @Override
    public Action playTurn(ActionList actions, Action lastAction, GameMap map, Display display) {
        Action monologueAction = behaviours.get(90).getAction(this, map); //Get the MonologueAction of this
        // If the monologueAction variable isn't null
        if (monologueAction != null) {
            System.out.println(monologueAction.execute(this, map)); //Execute monologueAction
        }

        Location here = map.locationOf(this); // Location of this

        // For each of the adjacent squares
        for (Exit exit : here.getExits()) {
            Location destination = exit.getDestination();
            // If Mario enters an adjacent square
            if (destination.containsAnActor() && destination.getActor().hasCapability(Status.HOSTILE_TO_ENEMY)) {
                isWaiting = false; // Bowser is no longer waiting and will perform actions
            }
        }

        // For each behaviour that this actor can perform; return the first valid action generated
        for (game.behaviours.Behaviour behaviour : behaviours.values()) {
            if (behaviour != behaviours.get(90) && !isWaiting) {
                Action action = behaviour.getAction(this, map);
                if (action != null)
                    return action;
            }
        }
        return new DoNothingAction(); // DoNothingAction if nothing is valid
    }

    /**
     * @param otherActor the Actor that might be performing attack
     * @param direction  String representing the direction of the other Actor
     * @param map        current GameMap
     * @return ActionList of all actions that can be performed upon this actor
     */
    public ActionList allowableActions(Actor otherActor, String direction, GameMap map) {
        ActionList actions = new ActionList();
        // it can be attacked only by the HOSTILE opponent, and this action will not attack the HOSTILE enemy back.
        if (otherActor.hasCapability(Status.HOSTILE_TO_ENEMY)) {
            actions.add(new AttackAction(this, direction));
        }
        return actions;
    }

    /**
     * Reset Bowser to initial position/stats
     *
     * @param map The map from which the actor will be removed
     */
    @Override
    public void resetInstance(GameMap map) {
        map.moveActor(this, map.at(51, 2));
        this.isWaiting = true;
        this.resetMaxHp(500);
    }
}
